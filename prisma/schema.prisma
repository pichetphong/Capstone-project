// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One-to-many relationship with HealthMetrics
  healthMetrics HealthMetrics[]
  Meals         Meals[]
}

model HealthMetrics {
  id            String   @id @default(uuid())
  age           Int?
  weight        Float?
  height        Float?
  gender        Int? // 0 = female, 1 = male
  goal          Int? // -1 = lose weight, 0 = maintain weight, 1 = gain weight
  dietType      Int? // low carb = -1, balanced = 0, high protein = 1
  activityLevel Int? // 0 = sedentary / 1.2, 1 = lightly active / 1.375, 2 = moderately active / 1.55, 3 = very active / 1.725, 4 = super active / 1.9
  bmi           Float
  bmr           Float
  tdee          Float
  bodyFat       Float
  fatMass       Float
  leanMass      Float
  weeklySurplus Float
  dailySurplus  Float
  protein       Float
  fat           Float
  carbs         Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Ingredients {
  id            String   @id @default(uuid())
  name          String   @unique
  calories      Float
  protein       Float
  fat           Float
  carbohydrates Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Meal_Ingredients Meal_Ingredients[]
}

model Meal_Ingredients {
  id        String   @id @default(uuid())
  quantity  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mealId       String
  meal         Meals       @relation(fields: [mealId], references: [id], onDelete: Cascade)
  ingredientId String
  ingredient   Ingredients @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
}

model Meals {
  id             String   @id @default(uuid())
  week           Int
  day            String // Monday, Tuesday, ...
  meal           String // Breakfast, Lunch, Dinner
  name           String
  cooking_method String
  calories       Float
  protein        Float
  fat            Float
  carbohydrates  Float
  reason         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  UserId String
  user   User   @relation(fields: [UserId], references: [id], onDelete: Cascade)

  Meal_Ingredients Meal_Ingredients[]
}
