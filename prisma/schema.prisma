// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One-to-many relationship with HealthMetrics
  healthMetrics HealthMetrics[]
  Meals         Meals[]
}

model HealthMetrics {
  id            String         @id @default(uuid())
  age           Int?
  weight        Float?
  height        Float?
  gender        Gender?
  goal          Goal?
  dietType      DietType?
  activityLevel ActivityLevel?
  bmi           Float
  bmr           Float
  tdee          Float
  bodyFat       Float
  fatMass       Float
  leanMass      Float
  weeklySurplus Float
  dailySurplus  Float
  protein       Float
  fat           Float
  carbs         Float
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
  FEMALE // 0
  MALE // 1
}

enum Goal {
  LOSE_WEIGHT // -1
  MAINTAIN // 0
  GAIN_WEIGHT // 1
}

enum DietType {
  LOW_CARB // -1
  BALANCED // 0
  HIGH_PROTEIN // 1
}

enum ActivityLevel {
  SEDENTARY // 0 (1.2)
  LIGHTLY_ACTIVE // 1 (1.375)
  MODERATELY_ACTIVE // 2 (1.55)
  VERY_ACTIVE // 3 (1.725)
  SUPER_ACTIVE // 4 (1.9)
}

model Ingredients {
  id            String   @id @default(uuid())
  name          String   @unique
  calories      Float
  protein       Float
  fat           Float
  carbohydrates Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Meal_Ingredients Meal_Ingredients[]
}

model Meal_Ingredients {
  id        String   @id @default(uuid())
  quantity  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mealId       String
  meal         Meals       @relation(fields: [mealId], references: [id], onDelete: Cascade)
  ingredientId String
  ingredient   Ingredients @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
}

model Meals {
  id             String   @id @default(uuid())
  week           Int
  day            String // Monday, Tuesday, ...
  meal           String // Breakfast, Lunch, Dinner
  name           String
  cooking_method String
  calories       Float
  protein        Float
  fat            Float
  carbohydrates  Float
  reason         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  UserId String
  user   User   @relation(fields: [UserId], references: [id], onDelete: Cascade)

  Meal_Ingredients Meal_Ingredients[]
}
